name: release

on:
  push:
    tags:
      - v*
  workflow_dispatch:

jobs:
  verity-build:
    name: Run the continuous integration workflow
    uses: ./github/workflows/ci.yml@master
    secrets: inherit

  publish-npm:
    name: Publish NPM
    needs: [verify-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          registry-url: 'https://registry.npmjs.org'
      - run: npm ci
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release-tarball:
    name: Build and release standalone tarball
    needs: [verify-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - run: npm ci
      - run: npx oclif-dev pack
      - run: npx oclif-dev publish
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  release-win:
    name: Build and release windows installer
    needs: [verify-build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - run: sudo apt-get install p7zip
      - run: sudo apt-get install nsis
      - run: npm ci
      - run: npx oclif-dev pack:win
      - run: npx oclif-dev publish:win
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  release-macos:
    name: Build and release macos package
    needs: [verify-build]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Install the Apple developer certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=${{ runner.temp }}/build_certificate.p12
          KEYCHAIN_PATH=${{ runner.temp }}/app-signing.keychain-db

          # import developers certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - run: npm ci
      - name: Create the MacOS package with Apple developer certificate
        run: |
          security list-keychain -d user -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          OSX_KEYCHAIN=$KEYCHAIN_PATH npx oclif-dev pack:macos
        env:
          KEYCHAIN_PATH: ${{ runner.temp }}/app-signing.keychain-db
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      - name: Notarize the package
        run: |
          PACKAGE_PATH=`ls ./dist/macos/lf-cli-v*.pkg`
          xcrun notarytool submit \
                --team-id ${{ secrets.OSX_NOTARY_TEAM_ID }} \
                --apple-id=${{ secrets.OSX_NOTARY_APPLE_ID }} \
                --password=${{ secrets.OSX_NOTARY_APPLE_PASSWORD }} \
                --progress \
                --wait \
                $PACKAGE_PATH
      - name: Publish the package
        run: npx oclif-dev publish:macos
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  invalidate-cdn:
    name: Invalidate the CDN
    runs-on: ubuntu-latest
    needs:
      - release-macos
      - release-win
      - release-tarball
    steps:
      - run: |
          aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.CDN_DISTRIBUTION_ID }} \
              --paths \
              "/lf-cli-darwin-x64.tar.gz" \
              "/lf-cli-linux-arm.tar.gz" \
              "/lf-cli-linux-x64.tar.gz" \
              "/lf-cli-win32-x64.tar.gz" \
              "/lf-cli-win32-x86.tar.gz" \
              "/lf-cli-x64.exe" \
              "/lf-cli-x86.exe" \
              "/lf-cli.pkg" \
              "/lf-cli.tar.gz" \
              "/version"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
